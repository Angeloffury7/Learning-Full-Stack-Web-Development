Make sure you are comfortable with arrow functions, spread, destructuring
etc.

React basics, Vite, props, events, hooks, forms, material UI, component designs, react patterns

        REACT
Front-end library that helps us build UI. VERY popular
UI from components -> small individual pieces that we assemble to build a website.

use codesandbox.io for now

react.dev -> official docs

Component -> function that combines logic, HTML etc

You can nest components inside each other, package it together and use this inside another component

React is more of an ecosystem, so we want a server, webpack, babel etc
For now, use code sandbox

public directory -> don't touch this file, it has index.html which is our main file. We render all our React
                    code in the empty div.
src -> we write our code here

How are we writing HTML inside JavaScript?

function Header() { 
    return (html)
}
This function "knows" how to render itself

> JSX syntax extension for JS, allows to write HTML-like markup inside JS which must be transpiled.
It's not legal JS
> Babel transpiles JSX and turns it into real JS. It will take our JSX and transpiles it into actual JS.


REACT APP STRUCTURE
1. highest level component called App
2. index.js, where our App component is called and our website is assembled.
    selects the root div and renders App component here.
3. index.html, our main file.

FIRST COMPONENT
The first letter should be uppercase, and should return some JSX
You need to call your component somewhere to see it. To render it, create a sort-of self-closing html tag.

YOU CAN ONLY RETURN A SIMPLE HTML ELEMENT FROM A COMPONENT

                        IMPORTING AND EXPORTING COMPONENTS
One component per file.
like import App from "./App",
Greeter.js -> either export function ...
              export default function...  (most common)

We can also do export {Dog} exporting individual elements
import { Dog } from "./Dogs.js" -> has to absolutely match

With export default, we can change the name while importing, but bad idea!!!

1. Name of component should match the name of file, and export default.

JSX RULES
1. You must explicitly close self-closing tags, eg. <br/>
    export default function Form() {
        return <input type="password"> //error
    }

2. components can only return a single top element
    If you want to return more than one, wrap them in a div.

But, this may clutter the DOM. To avoid unnecessary wrapper elements, we can use React fragments

<> empty tag, this satisfies the rules of React, but in the document, the elements inside will be rendered as stand-alone
elements

ADDING DYNAMIC VALUES
Like string template literals
use curly braces, this escapes the jsx content and is treated like pure js (variables)

COMPOSING REACT COMPONENTS
Instead of rendering 3 separate die components, it's better to take multiple die comps and add them to a dice comp.

How to style components?
conventional way -> take top level element, and give it a class which matches the name of comp. But, class is a keyword in JS
                    use className
                    and make a stylesheet
                    import "./styles.css"
You could write all your styles in a single stylesheet, but then it would become very complicated to change anything


CREATING LOCAL REACT APPS
We ususally do npx create-react-app nameofApp
We will use Vite (veet), helps us quickly set up Vue, Svelte, React, Typescript variants, or Vanilla
To use, npm create vite@latest

It is VERY quick 
After installation, run "npm run dev"
Even though it says App.jsx it doesn't matter

** NOTE -> create-react-app is a way of getting a basic React setup. It used to be standard, but much slower and outdated