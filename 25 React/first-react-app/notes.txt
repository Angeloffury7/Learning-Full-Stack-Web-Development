🔖 3:15:45
📽️ https://www.youtube.com/watch?v=6l8RWV8D-Yo

REFER TO THE REACT DOCS, THEY ARE AMAZING

WHY REACT? 
> Single-page applications. Things don't reload.
> Can be used as a part of Multi-page applications.

React is a UI library based on components. Components are reusable, have an easy structure, 

Components are functions that return UI. In React, you NEED to capitalize your component 
names.

When exporting multiple things from a single file, pass them as a object and remove "default".
But it's not preferable to export more than 1 component from one file

JSX -> HTML inside your JavaScript

converting HTML to JSX => 
1. Return a single root element
    To get around this, use <> </> as a wrapper (these are called fragments)

2. you can't write "class" to give classes to your HTML elements, use className=""

3. Whenever using inline CSS or attributes (onClick), they must be camel-cased.

4. All self-closing tags must be explicitly closed (<input />, <br />)

To use expressions/variables, use {}. to hard-code stuff, use ""

style: {{}}, outer bracket means that it must escape jsx, the inner bracket means it's a object.
IN REACT, YOU MUST PASS STYLES AS AN OBJECT

To pass different arguments to a component so that we can different UI, we pass "props"
props is an object, so we can destructure values out of it.

Props are read-only, can't change them inside a component using onClick etc,

> To pass numbers, you must pass them as an expression -> example: {45}, don't pass them as a string.
> You can give a default prop value like regular objects
> You can store your props as an object in your and pass them in a component using Spread operator


                                CONDITIONAL RENDERING
We only render a component if it satisifies a condition. Most common way is to use ternary operator.
Another way -> use short circuiting. If LHS is false, right side will never evaluate.

Try to take out as much common part as you can, change as less content as you can in conditional rendering.

                                LIST-RENDERING
Use .map()

Moving videos array to another file to clean up.

** REACT HAS A CONCEPT OF VIRTUAL-DOM, WHICH SAYS THAT REACT SHOULD BE ABLE TO UNIQUELY IDENTIFY EACH COMPONENT,
SO THAT IF IT DOESN'T HAVE ANY CHANGES, REACT WON'T RE-RENDER IT AGAIN AND AGAIN

** WHENEVER YOU ARE WRITING ANY FORM OF JAVASCRIPT IN JSX, USE {}

                                INTERACTIVITY

Events ------------
Adding a PlayButton. But nothing is happening when we click it? When component is rendering, it's logging it.
Because we are calling an event-handler function. ONLY DEFINE IT. Either pass a reference to the function, or pass 
it as an arrow function.

The reason is that, when you execute the function in the attribute, it will run what is returned from the function, which is nothing.

Whenever you pass something in between the tags of a component, it is available as props.children
🍒READ ABOUT IT FROM DOCS

Right now, we are logging in both. What if we want to do alert on 1 button and log on second? Yes
You can pass functions as props. 

> When the video is playing, we want to show "||" and when it's paused, we want to show ">". Our toggle is working in the console. But
    the sign isn't getting updated? It's because React only updates State variables. This is a feature, not a bug.

    Whenever we want to change something in our UI dynamically, we use State (more later)

Now we are nesting the playbutton inside the Video component as we want a play/pause button with each video. Access it using
children props.

> We have added an onClick to the App div, and it's showing event bubbling. To stop it, in your play button handleclick, add an 
event object argument and do evt.stopPropagation(). It's known as event in html, and Synthetic Event in React.


                                        STATE HOOK

We aren't able to change the content/state of a component. A post is liked/not-liked. Hooks -> They are external functions which you can
 access inside your component. Our component "hooks" onto the external function.

To make our component re-render everytime something is changed, we use state variables. The only way we get different output is if function runs again.
If we increment and manually reload the function, wo wapas 0 ho jayega! That's why we need hook.

const [number, setNumber] = useState(0);
number is the variable whose initial value is "0", setNumber is a function which updates the number variable and re-renders the component.
This is a convention, follow it.

** YOU NEVER DIRECTLY UPDATE A STATE VARIABLE

Why isn't React logging the current value of React? We click, initially number is 0. The value of the state variable only changes when the component 
re-renders and we fetch the updated value from state. We are writing multiple setNumber(number + 1), but it's only incrementing by 1?

Ek render-cycle mein number is 0 hi, baar baar use 1 hi set kar rhe hain, because all calls are batched together in a cycle. All of them are saying the same thing - 
increment by one.

in the setTimeout version, doesn't matter how many times we click it, number is only incremented by 1, because dono baar number ki value 1 hi rahegi
Wo render ke baad hi update hoti hai.

eg, Liking a post.

Replacing playing variable in PlayButton.jsx with useState, now variable is changing. In React, only that component is re-rendered that is being updated.


In App.jsx, where we are trying to add a new video on clicking a button, it's not working because we are directly changing a state variable.
because uski copy bane aur nayi state bane

Now that we are passing a mutated copy, it's working instantly :D For now, just know that everything will get re-rendered in your app. will tackle this later.